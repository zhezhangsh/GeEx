shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/srv/shiny-server/geex/test")
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
# Pre-load data when this App is started
AWSOMICS_HOME<-"/srv/shiny-server";
# RCHIVE_HOME<-"/zhangz/rchive";
APP_HOME<-paste("/srv/shiny-server/geex");
# subfolders
GEX_HOME <- GENE_HOME <- GENESET_HOME <- "/srv/shiny-server/geex/test";
# GENE_HOME<-paste(RCHIVE_HOME, '/data/gene/public/entrez/r', sep=''); # Location of gene annotation data
# GENESET_HOME<-paste(RCHIVE_HOME, '/data/gene.set/r', sep=''); # Location of gene annotation data
# GEX_HOME<-paste(RCHIVE_HOME, '/data/gex', sep=''); # Gene expression data collections
require(XML);
require(readxl);
require(shinythemes);
require(plotly);
require(RoCA);
require(rchive);
require(awsomics);
require(DEGandMore);
# load source code
fn<-paste(APP_HOME, 'source', dir(paste(APP_HOME, 'source', sep='/')), sep='/');
fnc<-sapply(fn, function(fn) if (gregexpr('\\.R$', fn, ignore.case=TRUE)>0) source(fn));
x <- geex.load.collection('demo', GEX_HOME)
x <- geex.load.collection('demo', GEX_HOME)
length(x)
names(x)
x[[4]]
x[[2]]
dim(x[[1]])
names(x[[1]])
str(x)
coll.name <- 'demo'
coll.meta<-readRDS(paste(GEX_HOME, 'r', 'collection.rds', sep='/'));
# Files to be loaded
fn.load<-c('metadata', 'metadata_by_id', 'gene', 'mapping', 'browse_table', 'gex_combined');
fn.load
coll.meta
is.na(coll.name[1]) | coll.name[1]==''
msg<-c(); # message to return
id<-coll.name[1];
nm<-coll.meta[id, 'Name'];
nm
id
coll.name[1]
rownames(coll.name)
rownames(coll.meta)
x <- geex.load.collection('C0000', GEX_HOME)
str(x)
id<-coll.name[1];
nm<-coll.meta[id, 'Name'];
nm
id
coll.name <- 'C0001'
id<-coll.name[1];
nm<-coll.meta[id, 'Name'];
nm
coll.name <- 'C0000'
x <- geex.load.collection('C0000', GEX_HOME)
coll.name <- 'C0000'
id<-coll.name[1];
nm<-coll.meta[id, 'Name'];
nm
paths<-c(paste(GEX_HOME, c('public', 'private'), tolower(nm), 'r', sep='/'));
path<-paths[file.exists(paths)];
path
path<-paths[file.exists(paths)];
paths<-c(paste(GEX_HOME, c('public', 'private'), tolower(nm), 'r', sep='/'));
paths
# load source code
fn<-paste(APP_HOME, 'source', dir(paste(APP_HOME, 'source', sep='/')), sep='/');
fnc<-sapply(fn, function(fn) if (gregexpr('\\.R$', fn, ignore.case=TRUE)>0) source(fn));
x <- geex.load.collection('C0000', GEX_HOME)
str(x)
path
coll.meta<-readRDS(paste(GEX_HOME, 'r', 'collection.rds', sep='/'));
# Files to be loaded
fn.load<-c('metadata', 'metadata_by_id', 'gene', 'mapping', 'browse_table', 'gex_combined');
msg<-c(); # message to return
id<-coll.name[1];
nm<-coll.meta[id, 'Name'];
#     id<-strsplit(coll.name, ': ')[[1]][1];
#     nm<-strsplit(coll.name, ': ')[[1]][2];
paths<-c(paste(GEX_HOME, c('public', 'private'), tolower(nm), 'r', sep='/'));
path<-paths[file.exists(paths)];
path
paths
nm
paths
# load source code
fn<-paste(APP_HOME, 'source', dir(paste(APP_HOME, 'source', sep='/')), sep='/');
fnc<-sapply(fn, function(fn) if (gregexpr('\\.R$', fn, ignore.case=TRUE)>0) source(fn));
x <- geex.load.collection('C0000', GEX_HOME)
str(x)
names(x)
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
?conditionalPanel
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
cll <- x
names(cll)
cll[[2]]
cll$name
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
setwd("/srv/shiny-server/geex/source")
runApp('/srv/shiny-server/geex')
loaded <- geex.load.collection('C0000', GEX_HOME);
names(loaded)
loaded$name
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
runApp('/srv/shiny-server/geex')
source("/srv/shiny-server/rnaseq_2g/preload.R");
q()
